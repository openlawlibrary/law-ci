image: Visual Studio 2019

environment:
  matrix:
    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    - PYTHON: "C:\\Python310-x64"

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

on_finish:
  - ps: >-
      if (Test-Path $env:APPVEYOR_BUILD_FOLDER\test_roundtrip.log){
          Push-AppveyorArtifact test_roundtrip.log
      };
      If ($env:DEBUG -eq $True) {
          $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      };

init:
  # exit if secure variables are unset (saves time if fired by a non-team pull request)
  - ps: if ($env:GH_SSH_PRIVATE_KEY -eq $null) { exit }

  - git config --global user.name oll-bot
  - git config --global user.email developers@openlawlib.org

install:
  # upgrade pip
  - "%PYTHON%\\python.exe -m pip install --upgrade pip"

  # the only way we can use the deploy key is by putting it in an environment variable (see above)
  # and then using PowerShell (ps) to copy the environment variable into a file (see below)
  # begin/end key lines should be in the environment variable
  - ps: $key = "-----BEGIN OPENSSH PRIVATE KEY-----`n"
  - ps: $key += $env:GH_SSH_PRIVATE_KEY.Replace(" ", "`n")
  - ps: $key += "`n-----END OPENSSH PRIVATE KEY-----`n"
  - ps: Set-Content c:\users\appveyor\.ssh\id_rsa $key
  - set %PARTNER%_XML_CODIFIED_PATH=..\%UPSTREAM%-codified-preview

before_build:
  # read requirements.txt and split it by # to get partners namespace.
  # this is necessary because pytest expects an argument containing specific partner
  # example result:  oll.partners.us.ca.cities.san_mateo
  - ps: $REQUIREMENTS_CONTENT = Get-Content .\requirements.txt -Raw;
  - ps: $CONTENT_ARRAY = $REQUIREMENTS_CONTENT -split "# ";
  - ps: $env:PARTNER_NAMESPACE = $CONTENT_ARRAY[1];

  - ps: >-
      If ($env:TAF_BRANCH) {
        git clone -q git@github.com:openlawlibrary/taf.git ..\wheels\taf
        git -C ..\wheels\taf checkout -q $env:TAF_BRANCH
        $env:TAF_WHEEL = "-e ..\wheels\taf"
      } else {
        $env:TAF_WHEEL = "taf"
      };

      If ($env:PLATFORM_BRANCH) {
        git clone -q git@github.com:openlawlibrary/platform.git ..\wheels\platform
        git -C ..\wheels\platform checkout -q $env:PLATFORM_BRANCH
        $env:CORE_WHEEL = "-e ..\wheels\platform\core"
        If($env:PARTNER_NAMESPACE -eq 'oll.partners.us.dc') {
          $env:PARTNERS_WHEEL = "-e ..\wheels\platform\partners-us-dc"
        }
        else {
          $env:PARTNERS_WHEEL = "-e ..\wheels\platform\partners"
        };
      } else {
        $env:CORE_WHEEL = "--pre oll-core"
        If($CONTENT_ARRAY[0] -match "~=") {
          $VERSION = $CONTENT_ARRAY[0] -split "~="
          $env:CORE_WHEEL += "~=" + $VERSION[1]
        };
        $env:PARTNERS_WHEEL = "--pre " + $CONTENT_ARRAY[0]
      };

  - "%PYTHON%\\python.exe -m pip -q install wheel"
  - "%PYTHON%\\python.exe -m pip -q install %TAF_WHEEL%"
  - "%PYTHON%\\python.exe -m pip -q install %CORE_WHEEL%"
  - "%PYTHON%\\python.exe -m pip -q install %PARTNERS_WHEEL%"
  - "%PYTHON%\\python.exe -m pip list"

  - "%PYTHON%\\python.exe  -m oll.tools.cli ci clone-repos-from-xml .. ../%APPVEYOR_PROJECT_SLUG% "

  # install versioned resources (if and only if the build is a tag or cron build)
  - "%PYTHON%\\python.exe -m pip -q install -r requirements.txt"
  - "%PYTHON%\\python.exe -m pip -q install pytest"
  # print out the git commits for xml repo
  - git -C ..\%UPSTREAM% rev-parse HEAD

build_script:
  - ps: >-
      If ($env:APPVEYOR_SCHEDULED_BUILD -eq $True){
        $run_sync = $env:PYTHON + '\python.exe -m oll.tools.cli ci synch-xml-with-upstream --library-root .. --auth ../law --upstream-url git@github.com' + $env:UPSTREAM + ' --upstream-auth-url git@github.com' + $env:UPSTREAM.Substring(0, $env:UPSTREAM.lastIndexOf('-'));
        iex $run_sync;
      };
      $env:FLAG = if ($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null) { "--deploy" }
  - "%PYTHON%\\python.exe  -m oll.tools.cli ci build-preview --library-root .. --auth ../law %FLAG%"

test_script:
  # run roundtrip tests
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq 'master' -Or $env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH -eq 'master'){
        cd $env:APPVEYOR_BUILD_FOLDER;
        $run_roundtrip = $env:PYTHON + '\python.exe -m pytest --pyargs ' + $env:PARTNER_NAMESPACE + '.tests.docs.code.roundtrip -m "full_roundtrip"';
        iex $run_roundtrip;
        if ($LastExitCode -eq 4 -or $LastExitCode -eq 5) {
            Write-Warning "Skipping roundtrip tests - roundtrip tests not found";
        } elseif ($LastExitCode -ne 0) {
          $host.SetShouldExit($LastExitCode)  
        }
      } else {
        echo "Skipping rountrip tests - not master branch build";
      }
notifications:
  - provider: Slack
    incoming_webhook:
      # post to the fire channel
      secure: KUaR+KAqX1jU0LF7kRDKHHGEAoItFzIHSjcreyRvnrRGMiSObCLPipW6KJUwvpl7CEWa8PP2LPzgiQssPcUWLCzoIVY+NvucTI+1NJ0H7GM=
    on_build_success: false

artifacts:
  - path: test_roundtrip.log
    name: roundtrip log